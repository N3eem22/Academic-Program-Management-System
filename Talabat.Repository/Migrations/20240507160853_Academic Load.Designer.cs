// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Talabat.Repository.Data.Talabat.Repository.Data;

#nullable disable

namespace Grad.Repository.Migrations
{
    [DbContext(typeof(GradContext))]
    [Migration("20240507160853_Academic Load")]
    partial class AcademicLoad
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Grad.Core.Entities.Academic_regulation.AcademicLoadAccordingToLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AcademicNoticeHours")
                        .HasColumnType("int");

                    b.Property<int>("ExceptionToMinimumHours")
                        .HasColumnType("int");

                    b.Property<int>("ExceptionToTheMaximumHours")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<int>("MaximumHours")
                        .HasColumnType("int");

                    b.Property<int>("MinimumHours")
                        .HasColumnType("int");

                    b.Property<int>("Prog_InfoId")
                        .HasColumnType("int");

                    b.Property<int>("Re_registrationHours")
                        .HasColumnType("int");

                    b.Property<int>("SemestersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("Prog_InfoId");

                    b.HasIndex("SemestersId");

                    b.ToTable("AR_AcademicLoadAccordingToLevel");
                });

            modelBuilder.Entity("Grad.Core.Entities.Academic_regulation.Program_TheGrades", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EquivalentEstimateId")
                        .HasColumnType("int");

                    b.Property<int>("GraduationEstimateId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PointsFrom")
                        .HasColumnType("int");

                    b.Property<int>("PointsTo")
                        .HasColumnType("int");

                    b.Property<int>("TheGradeId")
                        .HasColumnType("int");

                    b.Property<int>("ThePercentageFrom")
                        .HasColumnType("int");

                    b.Property<int>("ThePercentageTo")
                        .HasColumnType("int");

                    b.Property<int>("prog_InfoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquivalentEstimateId");

                    b.HasIndex("GraduationEstimateId");

                    b.HasIndex("TheGradeId");

                    b.HasIndex("prog_InfoId");

                    b.ToTable("AR_Program_TheGrades");
                });

            modelBuilder.Entity("Grad.Core.Entities.Academic_regulation.programLevels", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("InstitutionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MaximumHours")
                        .HasColumnType("int");

                    b.Property<int>("MinimumHours")
                        .HasColumnType("int");

                    b.Property<int>("TheLevelId")
                        .HasColumnType("int");

                    b.Property<int>("prog_InfoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TheLevelId");

                    b.HasIndex("prog_InfoId");

                    b.ToTable("AR_ProgramLevels");
                });

            modelBuilder.Entity("Grad.Core.Entities.Control.ACaseOfAbsenceInTheDetailedGrades", b =>
                {
                    b.Property<int>("GradeDetailId")
                        .HasColumnType("int");

                    b.Property<int>("ControlId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("GradeDetailId", "ControlId");

                    b.HasIndex("ControlId");

                    b.ToTable("ACaseOfAbsenceInTheDetailedGrades");
                });

            modelBuilder.Entity("Grad.Core.Entities.Control.ASuccessRatingDoesNotAddHoursOrAverage", b =>
                {
                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.Property<int>("ControlId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("GradeId", "ControlId");

                    b.HasIndex("ControlId");

                    b.ToTable("ASuccessRatingDoesNotAddHoursOrAverage");
                });

            modelBuilder.Entity("Grad.Core.Entities.Control.Control", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("AddingExciptionLetters")
                        .HasColumnType("bit");

                    b.Property<bool>("AllDetailOrNo")
                        .HasColumnType("bit");

                    b.Property<int>("CalculateEstimate")
                        .HasColumnType("int");

                    b.Property<bool?>("CalculatingTheBudgetEstimateFromTheReductionEstimates")
                        .HasColumnType("bit");

                    b.Property<int>("ChooseTheDetailsOfTheoreticalFailureBasedOn")
                        .HasColumnType("int");

                    b.Property<bool>("DetailsOfTheoreticalFailingGrades")
                        .HasColumnType("bit");

                    b.Property<int?>("EstimateDeprivationAfterTheExamId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("EstimateDeprivationBeforeTheExamId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("EstimatingTheTheoreticalFailure")
                        .HasColumnType("int");

                    b.Property<bool?>("ExceptionToDiscountEstimates")
                        .HasColumnType("bit");

                    b.Property<int>("FailingGrades")
                        .HasColumnType("int");

                    b.Property<int?>("FirstReductionEstimatesForFailureTimes")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PercentageForFristGrade")
                        .HasColumnType("int");

                    b.Property<int?>("PercentageForSecondGrade")
                        .HasColumnType("int");

                    b.Property<int?>("PercentageForThirdGrade")
                        .HasColumnType("int");

                    b.Property<bool>("PlacementOfStudentsInTheCourse")
                        .HasColumnType("bit");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.Property<int?>("SecondReductionEstimatesForFailureTimes")
                        .HasColumnType("int");

                    b.Property<int?>("SubtractFromTheDiscountRate")
                        .HasColumnType("int");

                    b.Property<int>("SuccessGrades")
                        .HasColumnType("int");

                    b.Property<int>("TheGrade")
                        .HasColumnType("int");

                    b.Property<int?>("ThirdReductionEstimatesForFailureTimes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstimateDeprivationAfterTheExamId");

                    b.HasIndex("EstimateDeprivationBeforeTheExamId");

                    b.HasIndex("EstimatingTheTheoreticalFailure");

                    b.HasIndex("FirstReductionEstimatesForFailureTimes");

                    b.HasIndex("ProgramId");

                    b.HasIndex("SecondReductionEstimatesForFailureTimes");

                    b.HasIndex("ThirdReductionEstimatesForFailureTimes");

                    b.ToTable("Controls");
                });

            modelBuilder.Entity("Grad.Core.Entities.Control.DetailsOfExceptionalLetters", b =>
                {
                    b.Property<int>("GradeDetailId")
                        .HasColumnType("int");

                    b.Property<int>("ControlId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("GradeDetailId", "ControlId");

                    b.HasIndex("ControlId");

                    b.ToTable("DetailsOfExceptionalLetters");
                });

            modelBuilder.Entity("Grad.Core.Entities.Control.DetailsOfTheoreticalFailingGrades", b =>
                {
                    b.Property<int>("GradeDetailId")
                        .HasColumnType("int");

                    b.Property<int>("ControlId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("GradeDetailId", "ControlId");

                    b.HasIndex("ControlId");

                    b.ToTable("DetailsOfTheoreticalFailingGrades");
                });

            modelBuilder.Entity("Grad.Core.Entities.Control.EstimatesNotDefinedInTheList", b =>
                {
                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.Property<int>("ControlId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("GradeId", "ControlId");

                    b.HasIndex("ControlId");

                    b.ToTable("EstimatesNotDefinedInTheList");
                });

            modelBuilder.Entity("Grad.Core.Entities.Control.ExceptionalLetterGrades", b =>
                {
                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.Property<int>("ControlId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("GradeId", "ControlId");

                    b.HasIndex("ControlId");

                    b.ToTable("ExceptionalLetterGrades");
                });

            modelBuilder.Entity("Grad.Core.Entities.Control.FailureEstimatesInTheList", b =>
                {
                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.Property<int>("ControlId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("GradeId", "ControlId");

                    b.HasIndex("ControlId");

                    b.ToTable("FailureEstimatesInTheList");
                });

            modelBuilder.Entity("Grad.Core.Entities.CoursesInfo.CourseInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddingCourse")
                        .HasColumnType("int");

                    b.Property<int>("ChooseDetailesofFailingGrades")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("CourseTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("FirstReductionEstimatesForFailureTimes")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<int>("LinkRegistrationToHours")
                        .HasColumnType("int");

                    b.Property<int>("MaximumGrade")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfPreviousPreRequisiteCourses")
                        .HasColumnType("int");

                    b.Property<int?>("PartOneCourse")
                        .HasColumnType("int");

                    b.Property<bool>("PassOrFailSubject")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("PercentageForFristGrade")
                        .HasColumnType("int");

                    b.Property<int?>("PercentageForSecondGrade")
                        .HasColumnType("int");

                    b.Property<int?>("PercentageForThirdGrade")
                        .HasColumnType("int");

                    b.Property<int>("PrerequisiteId")
                        .HasColumnType("int");

                    b.Property<int?>("PreviousQualification")
                        .HasColumnType("int");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.Property<bool>("RegistrationForTheCourseInTheSummerTerm")
                        .HasColumnType("bit");

                    b.Property<int?>("SecondReductionEstimatesForFailureTimes")
                        .HasColumnType("int");

                    b.Property<int>("SemesterId")
                        .HasColumnType("int");

                    b.Property<int>("SuccessRate")
                        .HasColumnType("int");

                    b.Property<int?>("ThirdReductionEstimatesForFailureTimes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseTypeId");

                    b.HasIndex("FirstReductionEstimatesForFailureTimes");

                    b.HasIndex("LevelId");

                    b.HasIndex("PartOneCourse");

                    b.HasIndex("PrerequisiteId");

                    b.HasIndex("PreviousQualification");

                    b.HasIndex("ProgramId");

                    b.HasIndex("SecondReductionEstimatesForFailureTimes");

                    b.HasIndex("SemesterId");

                    b.HasIndex("ThirdReductionEstimatesForFailureTimes");

                    b.ToTable("EN_CourssesInformations", (string)null);
                });

            modelBuilder.Entity("Grad.Core.Entities.CoursesInfo.CoursesandGradesDetails", b =>
                {
                    b.Property<int?>("CourseInfoId")
                        .HasColumnType("int");

                    b.Property<int?>("GradeDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("CourseInfoId", "GradeDetailsId");

                    b.HasIndex("GradeDetailsId");

                    b.ToTable("CoursesInformationsAndDetailedGrade", (string)null);
                });

            modelBuilder.Entity("Grad.Core.Entities.CoursesInfo.CoursesAndHours", b =>
                {
                    b.Property<int>("HourId")
                        .HasColumnType("int");

                    b.Property<int>("CourseInfoId")
                        .HasColumnType("int");

                    b.HasKey("HourId", "CourseInfoId");

                    b.HasIndex("CourseInfoId");

                    b.ToTable("CoursesAndHours", (string)null);
                });

            modelBuilder.Entity("Grad.Core.Entities.CoursesInfo.DetailsOfFailingGrades", b =>
                {
                    b.Property<int>("CourseInfoId")
                        .HasColumnType("int");

                    b.Property<int>("FailedGradeId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("CourseInfoId", "FailedGradeId");

                    b.HasIndex("FailedGradeId");

                    b.ToTable("CoursesAndFailingGrades", (string)null);
                });

            modelBuilder.Entity("Grad.Core.Entities.CoursesInfo.PreRequisiteCourses", b =>
                {
                    b.Property<int>("PreRequisiteCourseId")
                        .HasColumnType("int");

                    b.Property<int>("CourseInfoId")
                        .HasColumnType("int");

                    b.HasKey("PreRequisiteCourseId", "CourseInfoId");

                    b.HasIndex("CourseInfoId");

                    b.ToTable("PreRequisiteCourses");
                });

            modelBuilder.Entity("Grad.Core.Entities.CumulativeAverage.CumulativeAverage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CalculateTheCumulativeEstimate")
                        .HasColumnType("int");

                    b.Property<bool>("CalculateTheTermOfTheEquationInTheRate")
                        .HasColumnType("bit");

                    b.Property<bool>("CalculatingFailingGradePoints")
                        .HasColumnType("bit");

                    b.Property<bool>("CalculatingFailureTimesAfterTheFirstTimeInTheSemesterAverage")
                        .HasColumnType("bit");

                    b.Property<bool>("CalculatingTheSemesterEquationInHourseEarned")
                        .HasColumnType("bit");

                    b.Property<bool>("ChangingCourses")
                        .HasColumnType("bit");

                    b.Property<int>("DeleteFailedCoursesAfterSuccess")
                        .HasColumnType("int");

                    b.Property<int>("HowToCalculateTheRate")
                        .HasColumnType("int");

                    b.Property<int>("HowToCalculateTheRatio")
                        .HasColumnType("int");

                    b.Property<int>("HowToCalculateTheSemesterAverage")
                        .HasColumnType("int");

                    b.Property<int>("ImprovingCourses")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("KeepFailing")
                        .HasColumnType("bit");

                    b.Property<bool>("MaintainingStudentSuccess")
                        .HasColumnType("bit");

                    b.Property<int>("MaximumCumulativeGPA")
                        .HasColumnType("int");

                    b.Property<int>("MaximumNumberOfAdditionsToFailedCoursesWithoutSuccess")
                        .HasColumnType("int");

                    b.Property<int>("MultiplyingTheHoursByTheStudentsGrades")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfDigitsRoundingTheRatio")
                        .HasColumnType("int");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.Property<bool>("RateApproximation")
                        .HasColumnType("bit");

                    b.Property<bool>("ReducingTheRateUponImprovement")
                        .HasColumnType("bit");

                    b.Property<int>("SomeOfGrades")
                        .HasColumnType("int");

                    b.Property<bool>("SummerIsNotExcludedInCalculatingTheAnnualAverage")
                        .HasColumnType("bit");

                    b.Property<bool>("TheCumulativeAverageDoesNotAppearInTheStudentGradesPortal")
                        .HasColumnType("bit");

                    b.Property<int>("TheNnumberOfDigitsRroundingTheRate")
                        .HasColumnType("int");

                    b.Property<int>("TheNumberOfDigitsRoundinPoints")
                        .HasColumnType("int");

                    b.Property<bool>("TheSemesterAndCumulativePercentagesAppearInTheStudentsPortalForSubjectGrades")
                        .HasColumnType("bit");

                    b.Property<int>("UtmostGrade")
                        .HasColumnType("int");

                    b.Property<bool>("showingTheSemesterAndCumulativeGradeInTheStudentGradesPortal")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId");

                    b.HasIndex("UtmostGrade");

                    b.ToTable("CumulativeAverages");
                });

            modelBuilder.Entity("Grad.Core.Entities.CumulativeAverage.GadesOfEstimatesThatDoesNotCount", b =>
                {
                    b.Property<int?>("GradeId")
                        .HasColumnType("int");

                    b.Property<int?>("CumulativeAverageId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("GradeId", "CumulativeAverageId");

                    b.HasIndex("CumulativeAverageId");

                    b.ToTable("GadesOfEstimatesThatDoesNotCounts");
                });

            modelBuilder.Entity("Grad.Core.Entities.Entities.PI_AllGradesSummerEstimate", b =>
                {
                    b.Property<int>("ProgramInformationId")
                        .HasColumnType("int");

                    b.Property<int>("AllGradesId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("ProgramInformationId", "AllGradesId");

                    b.HasIndex("AllGradesId");

                    b.ToTable("PI_AllGradesSummerEstimate");
                });

            modelBuilder.Entity("Grad.Core.Entities.Entities.PI_DetailedGradesToBeAnnounced", b =>
                {
                    b.Property<int>("ProgramInformationId")
                        .HasColumnType("int");

                    b.Property<int>("GradesDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("ProgramInformationId", "GradesDetailsId");

                    b.HasIndex("GradesDetailsId");

                    b.ToTable("PI_DetailedGradesToBeAnnounced");
                });

            modelBuilder.Entity("Grad.Core.Entities.Entities.PI_DivisionType", b =>
                {
                    b.Property<int>("ProgramInformationId")
                        .HasColumnType("int");

                    b.Property<int>("DivisionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("ProgramInformationId", "DivisionTypeId");

                    b.HasIndex("DivisionTypeId");

                    b.ToTable("PI_DivisionType");
                });

            modelBuilder.Entity("Grad.Core.Entities.Entities.PI_EstimatesOfCourseFeeExemption", b =>
                {
                    b.Property<int>("ProgramInformationId")
                        .HasColumnType("int");

                    b.Property<int>("AllGradesId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("ProgramInformationId", "AllGradesId");

                    b.HasIndex("AllGradesId");

                    b.ToTable("PI_EstimatesOfCourseFeeExemption");
                });

            modelBuilder.Entity("Grad.Core.Entities.Graduation.AverageValue", b =>
                {
                    b.Property<int>("EquivalentGradeId")
                        .HasColumnType("int");

                    b.Property<int>("GraduationId")
                        .HasColumnType("int");

                    b.Property<int>("AllGradesId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("YearValue")
                        .HasColumnType("int");

                    b.Property<int>("value")
                        .HasColumnType("int");

                    b.HasKey("EquivalentGradeId", "GraduationId");

                    b.HasIndex("AllGradesId");

                    b.HasIndex("GraduationId");

                    b.ToTable("AverageValues");
                });

            modelBuilder.Entity("Grad.Core.Entities.Graduation.Graduation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("ComparingCumulativeAverageForEachYear")
                        .HasColumnType("bit");

                    b.Property<bool>("CompulsoryCourses")
                        .HasColumnType("bit");

                    b.Property<int>("DetermineTheRankBasedOn")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LevelId")
                        .HasColumnType("int");

                    b.Property<int>("MakeSureToPassTheOptionalGroups")
                        .HasColumnType("int");

                    b.Property<bool>("PassingMilitaryEducation")
                        .HasColumnType("bit");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.Property<bool>("Rate")
                        .HasColumnType("bit");

                    b.Property<int>("RateBase")
                        .HasColumnType("int");

                    b.Property<bool>("Ratio")
                        .HasColumnType("bit");

                    b.Property<int?>("StudyYears")
                        .HasColumnType("int");

                    b.Property<bool>("SuccessInEveryCourse")
                        .HasColumnType("bit");

                    b.Property<bool>("SummerTraining")
                        .HasColumnType("bit");

                    b.Property<int?>("TheMinimumGradeForTheCourseId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.Property<bool>("VerifyPaymentOfFees")
                        .HasColumnType("bit");

                    b.Property<int?>("WeeksorHours")
                        .HasColumnType("int");

                    b.Property<int?>("WeeksorHoursTobePassed")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("TheMinimumGradeForTheCourseId");

                    b.ToTable("Graduations");
                });

            modelBuilder.Entity("Grad.Core.Entities.Graduation.GraduationLevels", b =>
                {
                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<int>("GraduationId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("LevelId", "GraduationId");

                    b.HasIndex("GraduationId");

                    b.ToTable("GraduationLevels");
                });

            modelBuilder.Entity("Grad.Core.Entities.Graduation.GraduationSemesters", b =>
                {
                    b.Property<int>("SemesterId")
                        .HasColumnType("int");

                    b.Property<int>("GraduationId")
                        .HasColumnType("int");

                    b.Property<int>("Grad")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("SemesterId", "GraduationId");

                    b.HasIndex("GraduationId");

                    b.ToTable("GraduationSemesters");
                });

            modelBuilder.Entity("Grad.Core.Entities.Identity.AppUserFaculty", b =>
                {
                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int");

                    b.HasKey("AppUserId", "FacultyId");

                    b.HasIndex("FacultyId");

                    b.ToTable("AppUserFaculty");
                });

            modelBuilder.Entity("Grad.Core.Entities.Identity.AppUserUni", b =>
                {
                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UniversityId")
                        .HasColumnType("int");

                    b.HasKey("AppUserId", "UniversityId");

                    b.HasIndex("UniversityId");

                    b.ToTable("AppUserUni");
                });

            modelBuilder.Entity("Grad.Core.Entities.Lockups.DivisionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Division_Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_DivisionType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Talabat.Core.Entities.Academic_regulation.ProgramInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AcademicDegreeid")
                        .HasColumnType("int");

                    b.Property<int>("AdditionalRegistrationHours")
                        .HasColumnType("int");

                    b.Property<bool>("AllowingTheRegistrationOfaSpecificNumberOfElectiveCoursesDuringTheYear")
                        .HasColumnType("bit");

                    b.Property<string>("BeginningOfTheProgram")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BlockingProofOfRegistrationId")
                        .HasColumnType("int");

                    b.Property<bool>("BookFeeIsCalculatedForTheFirstTimeOfRegistrationOnly")
                        .HasColumnType("bit");

                    b.Property<int>("BurdanCalculationId")
                        .HasColumnType("int");

                    b.Property<bool>("CalculatingaSpecialRegistrationFeeForaCourseIfaPreviousAssessmentOfTheCourseIsIncomplete")
                        .HasColumnType("bit");

                    b.Property<int>("CreditHours")
                        .HasColumnType("int");

                    b.Property<int>("EditTheStudentLevelId")
                        .HasColumnType("int");

                    b.Property<int>("EligibleHoursforProjectRegistration")
                        .HasColumnType("int");

                    b.Property<string>("EndOfTheProgram")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ExcludingTheBudgetTermWhenCalculatingTheGPA")
                        .HasColumnType("bit");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int");

                    b.Property<int>("FailureTimesForRe_Enrollment")
                        .HasColumnType("int");

                    b.Property<int>("FailureTimesForWarning")
                        .HasColumnType("int");

                    b.Property<int>("FreeHours")
                        .HasColumnType("int");

                    b.Property<int>("InstitutionCode")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LinkingTheAppearanceOfDocumentsToTheReasonForWithholdingRegistration")
                        .HasColumnType("bit");

                    b.Property<bool>("LinkingTheAppearanceOfTheExaminationScheduleToThePaymentOfFees")
                        .HasColumnType("bit");

                    b.Property<string>("MajorNameInArabic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MajorNameInEnglish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Mandatory_ProjectHours")
                        .HasColumnType("int");

                    b.Property<string>("NameInCertificate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameInCertificateInEnglish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfFailureTimesToRequireRegistrationOfCompulsoryFailureSubjects")
                        .HasColumnType("int");

                    b.Property<int>("OptionalHours")
                        .HasColumnType("int");

                    b.Property<int>("PassingTheElectiveGroupBasedOnId")
                        .HasColumnType("int");

                    b.Property<int?>("PrerequisitesProgramsId")
                        .HasColumnType("int");

                    b.Property<int>("ProgramCode")
                        .HasColumnType("int");

                    b.Property<string>("ProgramNameInArabic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProgramNameInEnglish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProgramsId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectHours")
                        .HasColumnType("int");

                    b.Property<string>("Questionnaire")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReasonForBlockingRegistrationId")
                        .HasColumnType("int");

                    b.Property<bool>("RegistrationOfCoursesOfferedToStudentsFromTheSameCurrentSemesterOnlyThroughTheStudentPortalOnly")
                        .HasColumnType("bit");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SpecialProgram")
                        .HasColumnType("bit");

                    b.Property<int>("SystemTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TeamCode")
                        .HasColumnType("int");

                    b.Property<int>("TheReasonForHiddingTheResultId")
                        .HasColumnType("int");

                    b.Property<int>("TheResultAppearsId")
                        .HasColumnType("int");

                    b.Property<int>("TheResultToTheGuidId")
                        .HasColumnType("int");

                    b.Property<int>("TypeOfFinancialStatementInTheProgramId")
                        .HasColumnType("int");

                    b.Property<int>("TypeOfProgramFeesId")
                        .HasColumnType("int");

                    b.Property<int>("TypeOfSummerFeesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademicDegreeid");

                    b.HasIndex("BlockingProofOfRegistrationId");

                    b.HasIndex("BurdanCalculationId");

                    b.HasIndex("EditTheStudentLevelId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("PassingTheElectiveGroupBasedOnId");

                    b.HasIndex("PrerequisitesProgramsId");

                    b.HasIndex("ProgramsId");

                    b.HasIndex("ReasonForBlockingRegistrationId");

                    b.HasIndex("SystemTypeId");

                    b.HasIndex("TheReasonForHiddingTheResultId");

                    b.HasIndex("TheResultAppearsId");

                    b.HasIndex("TheResultToTheGuidId");

                    b.HasIndex("TypeOfFinancialStatementInTheProgramId");

                    b.HasIndex("TypeOfProgramFeesId");

                    b.HasIndex("TypeOfSummerFeesId");

                    b.ToTable("AR_ProgramInformation", (string)null);
                });

            modelBuilder.Entity("Talabat.Core.Entities.Entities.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FacultyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("Faculty");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Entities.Programs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("FacultyId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ProgramNameInArabic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProgramNameInEnglish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("EN_Programs");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Entities.University", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.ToTable("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Identity.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.AbsenteeEstimateCalculation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("absenteeEstimateCalculation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_AbsenteeEstimateCalculation");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.AllGrades", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TheGrade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_AllGrades");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.BlockingProofOfRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ReasonsOfBlocking")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_BlockingProofOfRegistration");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.BurdenCalculation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BurdenCalculationAS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_BurdenCalculation");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.CollegeCourses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ContentSummaryInArabic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentSummaryInEnglish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseCodeInArabic")
                        .HasColumnType("int");

                    b.Property<int>("CourseCodeInEnglish")
                        .HasColumnType("int");

                    b.Property<string>("CourseNameInArabic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseNameInEnglish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseNickname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FacultyId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Sub_CourseCodeInArabic")
                        .HasColumnType("int");

                    b.Property<int>("Sub_CourseCodeInEnglish")
                        .HasColumnType("int");

                    b.Property<string>("Sub_CourseNameInArabic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sub_CourseNameInEnglish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("CollegeCourses");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.CourseRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("courseRequirement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_CourseRequirement");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.CourseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("courseType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_CourseType");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.EditTheStudentLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("editTheStudentLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_EditTheStudentLevel");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.EquivalentGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("equivalentGrade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_EquivalentGrade");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.GradesDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TheDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_GradesDetails");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.Hours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("HoursName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_Hours");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("UniversityId")
                        .HasColumnType("int");

                    b.Property<string>("levels")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_Level");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.PassingTheElectiveGroupBasedOn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PassingTheElectiveGroup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_PassingTheElectiveGroupBasedOn");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.Prerequisites", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Prerequisite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_Prerequisite");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.PreviousQualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("previousQualification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_PreviousQualification");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.ReasonForBlockingAcademicResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TheReasonForBlockingAcademicResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_ReasonForBlockingAcademicResult");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.ReasonForBlockingRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TheReasonForBlockingRegistration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_ReasonForBlockingRegistration");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.Semesters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("semesters")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_Semester");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.SystemType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("System Type");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.TheAcademicDegree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AcademicDegreeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_TheAcademicDegree");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.TheResultAppears", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ResultAppears")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_TheResultAppears");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.TypeOfFinancialStatementInTheProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TheType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_TypeOfFinancialStatementInTheProgram");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.TypeOfProgramFees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TypeOfFees")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_TypeOfProgramFees");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.TypeOfStudySection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TheTypeOfStudySectio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_TypeOfStudySection");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.TypeOfSummerFees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TheTypeOfSummerFees")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_Typeofsummerfees");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Logs.ApplicationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Log_ApplicationLogs");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Permissions.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Perm_ApplicationUser");
                });

            modelBuilder.Entity("Grad.Core.Entities.Academic_regulation.AcademicLoadAccordingToLevel", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Lockups.Level", "AcademicLevel")
                        .WithMany("academicLoadAccordingToLevels")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Academic_regulation.ProgramInformation", "Program_Info")
                        .WithMany("academicLoadAccordingToLevels")
                        .HasForeignKey("Prog_InfoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Lockups.Semesters", "AL_Semesters")
                        .WithMany("academicLoadAccordingToLevels")
                        .HasForeignKey("SemestersId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AL_Semesters");

                    b.Navigation("AcademicLevel");

                    b.Navigation("Program_Info");
                });

            modelBuilder.Entity("Grad.Core.Entities.Academic_regulation.Program_TheGrades", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Lockups.EquivalentGrade", "EquivalentEstimate")
                        .WithMany("EquivalentEstimate")
                        .HasForeignKey("EquivalentEstimateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Lockups.EquivalentGrade", "GraduationEstimate")
                        .WithMany("GraduationEstimate")
                        .HasForeignKey("GraduationEstimateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Lockups.AllGrades", "TheGrade")
                        .WithMany("program_TheGrades")
                        .HasForeignKey("TheGradeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Academic_regulation.ProgramInformation", "prog_Info")
                        .WithMany("Program_TheGrades")
                        .HasForeignKey("prog_InfoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EquivalentEstimate");

                    b.Navigation("GraduationEstimate");

                    b.Navigation("TheGrade");

                    b.Navigation("prog_Info");
                });

            modelBuilder.Entity("Grad.Core.Entities.Academic_regulation.programLevels", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Lockups.Level", "TheLevel")
                        .WithMany("ProgramLevels")
                        .HasForeignKey("TheLevelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Academic_regulation.ProgramInformation", "prog_Info")
                        .WithMany("programLevels")
                        .HasForeignKey("prog_InfoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TheLevel");

                    b.Navigation("prog_Info");
                });

            modelBuilder.Entity("Grad.Core.Entities.Control.ACaseOfAbsenceInTheDetailedGrades", b =>
                {
                    b.HasOne("Grad.Core.Entities.Control.Control", "Control")
                        .WithMany("ACaseOfAbsenceInTheDetailedGrades")
                        .HasForeignKey("ControlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Lockups.GradesDetails", "GradesDetails")
                        .WithMany("ACaseOfAbsenceInTheDetailedGrades")
                        .HasForeignKey("GradeDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Control");

                    b.Navigation("GradesDetails");
                });

            modelBuilder.Entity("Grad.Core.Entities.Control.ASuccessRatingDoesNotAddHoursOrAverage", b =>
                {
                    b.HasOne("Grad.Core.Entities.Control.Control", "Control")
                        .WithMany("ASuccessRatingDoesNotAddHours")
                        .HasForeignKey("ControlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Lockups.AllGrades", "Grades")
                        .WithMany("ASuccessRatingDoesNotAddHoursOrAverages")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Control");

                    b.Navigation("Grades");
                });

            modelBuilder.Entity("Grad.Core.Entities.Control.Control", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Lockups.AllGrades", "EstimateDeprivationAfterTheExam")
                        .WithMany("EstimateDeprivationAfterTheExam")
                        .HasForeignKey("EstimateDeprivationAfterTheExamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Lockups.AllGrades", "EstimateDeprivationBeforeTheExam")
                        .WithMany("EstimateDeprivationBeforeTheExam")
                        .HasForeignKey("EstimateDeprivationBeforeTheExamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Lockups.AllGrades", "TheoriticalFailure")
                        .WithMany("TheoriticalFailure")
                        .HasForeignKey("EstimatingTheTheoreticalFailure")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Talabat.Core.Entities.Lockups.AllGrades", "FirstGrades")
                        .WithMany("FirstReduction")
                        .HasForeignKey("FirstReductionEstimatesForFailureTimes")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Talabat.Core.Entities.Academic_regulation.ProgramInformation", "Program")
                        .WithMany("Controls")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Lockups.AllGrades", "SecondGrades")
                        .WithMany("SecondReduction")
                        .HasForeignKey("SecondReductionEstimatesForFailureTimes")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Talabat.Core.Entities.Lockups.AllGrades", "ThirdGrades")
                        .WithMany("ThirdReduction")
                        .HasForeignKey("ThirdReductionEstimatesForFailureTimes")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("EstimateDeprivationAfterTheExam");

                    b.Navigation("EstimateDeprivationBeforeTheExam");

                    b.Navigation("FirstGrades");

                    b.Navigation("Program");

                    b.Navigation("SecondGrades");

                    b.Navigation("TheoriticalFailure");

                    b.Navigation("ThirdGrades");
                });

            modelBuilder.Entity("Grad.Core.Entities.Control.DetailsOfExceptionalLetters", b =>
                {
                    b.HasOne("Grad.Core.Entities.Control.Control", "Control")
                        .WithMany("DetailsOfExceptionalLetters")
                        .HasForeignKey("ControlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Lockups.GradesDetails", "GradesDetails")
                        .WithMany("DetailsOfExceptionalLetters")
                        .HasForeignKey("GradeDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Control");

                    b.Navigation("GradesDetails");
                });

            modelBuilder.Entity("Grad.Core.Entities.Control.DetailsOfTheoreticalFailingGrades", b =>
                {
                    b.HasOne("Grad.Core.Entities.Control.Control", "Control")
                        .WithMany("DetailsOfTheoreticalFailingGradesNav")
                        .HasForeignKey("ControlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Lockups.GradesDetails", "GradesDetails")
                        .WithMany("DetailsOfTheoreticalFailingGrades")
                        .HasForeignKey("GradeDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Control");

                    b.Navigation("GradesDetails");
                });

            modelBuilder.Entity("Grad.Core.Entities.Control.EstimatesNotDefinedInTheList", b =>
                {
                    b.HasOne("Grad.Core.Entities.Control.Control", "Control")
                        .WithMany("EstimatesNotDefinedInTheLists")
                        .HasForeignKey("ControlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Lockups.AllGrades", "Grades")
                        .WithMany("EstimatesNotDefinedInTheList")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Control");

                    b.Navigation("Grades");
                });

            modelBuilder.Entity("Grad.Core.Entities.Control.ExceptionalLetterGrades", b =>
                {
                    b.HasOne("Grad.Core.Entities.Control.Control", "Control")
                        .WithMany("ExceptionalLetterGrades")
                        .HasForeignKey("ControlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Lockups.AllGrades", "Grades")
                        .WithMany("ExceptionalLetterGrades")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Control");

                    b.Navigation("Grades");
                });

            modelBuilder.Entity("Grad.Core.Entities.Control.FailureEstimatesInTheList", b =>
                {
                    b.HasOne("Grad.Core.Entities.Control.Control", "Control")
                        .WithMany("FailureEstimatesInTheLists")
                        .HasForeignKey("ControlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Lockups.AllGrades", "grades")
                        .WithMany("FailureEstimatesInTheLists")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Control");

                    b.Navigation("grades");
                });

            modelBuilder.Entity("Grad.Core.Entities.CoursesInfo.CourseInformation", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Lockups.CollegeCourses", "Courses")
                        .WithMany("CourseInformations")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Lockups.CourseType", "CourseType")
                        .WithMany("CourseInformation")
                        .HasForeignKey("CourseTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Lockups.AllGrades", "FirstGrades")
                        .WithMany("FirstReductionInfo")
                        .HasForeignKey("FirstReductionEstimatesForFailureTimes")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Talabat.Core.Entities.Lockups.Level", "level")
                        .WithMany("CourseInformation")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Lockups.CollegeCourses", "collegeCourses")
                        .WithMany("PartOneCourse")
                        .HasForeignKey("PartOneCourse")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Talabat.Core.Entities.Lockups.Prerequisites", "Prerequisites")
                        .WithMany("CourseInformation")
                        .HasForeignKey("PrerequisiteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Lockups.PreviousQualification", "PreviousQualificationProp")
                        .WithMany("CourseInformation")
                        .HasForeignKey("PreviousQualification")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Talabat.Core.Entities.Academic_regulation.ProgramInformation", "Program")
                        .WithMany("Courses")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Lockups.AllGrades", "SecondGrades")
                        .WithMany("SecondReductionInfo")
                        .HasForeignKey("SecondReductionEstimatesForFailureTimes")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Talabat.Core.Entities.Lockups.Semesters", "Semester")
                        .WithMany("CourseInformation")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Lockups.AllGrades", "ThirdGrades")
                        .WithMany("ThhirdReductionInfo")
                        .HasForeignKey("ThirdReductionEstimatesForFailureTimes")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CourseType");

                    b.Navigation("Courses");

                    b.Navigation("FirstGrades");

                    b.Navigation("Prerequisites");

                    b.Navigation("PreviousQualificationProp");

                    b.Navigation("Program");

                    b.Navigation("SecondGrades");

                    b.Navigation("Semester");

                    b.Navigation("ThirdGrades");

                    b.Navigation("collegeCourses");

                    b.Navigation("level");
                });

            modelBuilder.Entity("Grad.Core.Entities.CoursesInfo.CoursesandGradesDetails", b =>
                {
                    b.HasOne("Grad.Core.Entities.CoursesInfo.CourseInformation", "CourseInformation")
                        .WithMany("coursesandGradesDetails")
                        .HasForeignKey("CourseInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Talabat.Core.Entities.Lockups.GradesDetails", "GradesDetails")
                        .WithMany("coursesandGradesDetails")
                        .HasForeignKey("GradeDetailsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CourseInformation");

                    b.Navigation("GradesDetails");
                });

            modelBuilder.Entity("Grad.Core.Entities.CoursesInfo.CoursesAndHours", b =>
                {
                    b.HasOne("Grad.Core.Entities.CoursesInfo.CourseInformation", "CourseInformation")
                        .WithMany("coursesAndHours")
                        .HasForeignKey("CourseInfoId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Talabat.Core.Entities.Lockups.Hours", "Hours")
                        .WithMany("coursesAndHours")
                        .HasForeignKey("HourId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CourseInformation");

                    b.Navigation("Hours");
                });

            modelBuilder.Entity("Grad.Core.Entities.CoursesInfo.DetailsOfFailingGrades", b =>
                {
                    b.HasOne("Grad.Core.Entities.CoursesInfo.CourseInformation", "CourseInformation")
                        .WithMany("detailsOfFailingGrades")
                        .HasForeignKey("CourseInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Talabat.Core.Entities.Lockups.GradesDetails", "FailedGrade")
                        .WithMany("detailsOfFailingGrades")
                        .HasForeignKey("FailedGradeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CourseInformation");

                    b.Navigation("FailedGrade");
                });

            modelBuilder.Entity("Grad.Core.Entities.CoursesInfo.PreRequisiteCourses", b =>
                {
                    b.HasOne("Grad.Core.Entities.CoursesInfo.CourseInformation", "CourseInformation")
                        .WithMany("preRequisiteCourses")
                        .HasForeignKey("CourseInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Talabat.Core.Entities.Lockups.CollegeCourses", "Courses")
                        .WithMany("preRequisiteCourses")
                        .HasForeignKey("PreRequisiteCourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CourseInformation");

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Grad.Core.Entities.CumulativeAverage.CumulativeAverage", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Academic_regulation.ProgramInformation", "Program")
                        .WithMany("CumulativeAverages")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Lockups.AllGrades", "Grades")
                        .WithMany("UtmostGrades")
                        .HasForeignKey("UtmostGrade")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Grades");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Grad.Core.Entities.CumulativeAverage.GadesOfEstimatesThatDoesNotCount", b =>
                {
                    b.HasOne("Grad.Core.Entities.CumulativeAverage.CumulativeAverage", "CumulativeAverage")
                        .WithMany("GadesOfEstimatesThatDoesNotCount")
                        .HasForeignKey("CumulativeAverageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Lockups.AllGrades", "Grades")
                        .WithMany("gadesOfEstimatesThatDoesNotCount")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CumulativeAverage");

                    b.Navigation("Grades");
                });

            modelBuilder.Entity("Grad.Core.Entities.Entities.PI_AllGradesSummerEstimate", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Lockups.AllGrades", "AllGrades")
                        .WithMany("pI_AllGradesSummerEstimates")
                        .HasForeignKey("AllGradesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Academic_regulation.ProgramInformation", "ProgramInformation")
                        .WithMany("pI_AllGradesSummerEstimates")
                        .HasForeignKey("ProgramInformationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AllGrades");

                    b.Navigation("ProgramInformation");
                });

            modelBuilder.Entity("Grad.Core.Entities.Entities.PI_DetailedGradesToBeAnnounced", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Lockups.GradesDetails", "GradesDetails")
                        .WithMany("pI_DetailedGradesToBeAnnounceds")
                        .HasForeignKey("GradesDetailsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Academic_regulation.ProgramInformation", "ProgramInformation")
                        .WithMany("pI_DetailedGradesToBeAnnounced")
                        .HasForeignKey("ProgramInformationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("GradesDetails");

                    b.Navigation("ProgramInformation");
                });

            modelBuilder.Entity("Grad.Core.Entities.Entities.PI_DivisionType", b =>
                {
                    b.HasOne("Grad.Core.Entities.Lockups.DivisionType", "DivisionType")
                        .WithMany("pI_DivisionTypes")
                        .HasForeignKey("DivisionTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Academic_regulation.ProgramInformation", "ProgramInformation")
                        .WithMany("pI_DivisionTypes")
                        .HasForeignKey("ProgramInformationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DivisionType");

                    b.Navigation("ProgramInformation");
                });

            modelBuilder.Entity("Grad.Core.Entities.Entities.PI_EstimatesOfCourseFeeExemption", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Lockups.AllGrades", "AllGrades")
                        .WithMany("PI_EstimatesOfCourseFeeExemptions")
                        .HasForeignKey("AllGradesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Academic_regulation.ProgramInformation", "ProgramInformation")
                        .WithMany("PI_EstimatesOfCourseFeeExemptions")
                        .HasForeignKey("ProgramInformationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AllGrades");

                    b.Navigation("ProgramInformation");
                });

            modelBuilder.Entity("Grad.Core.Entities.Graduation.AverageValue", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Lockups.AllGrades", "AllGrades")
                        .WithMany("AverageValues")
                        .HasForeignKey("AllGradesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Lockups.EquivalentGrade", "EquivalentGrade")
                        .WithMany("AverageValues")
                        .HasForeignKey("EquivalentGradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Grad.Core.Entities.Graduation.Graduation", "Graduation")
                        .WithMany("AverageValues")
                        .HasForeignKey("GraduationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AllGrades");

                    b.Navigation("EquivalentGrade");

                    b.Navigation("Graduation");
                });

            modelBuilder.Entity("Grad.Core.Entities.Graduation.Graduation", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Lockups.Level", null)
                        .WithMany("Graduations")
                        .HasForeignKey("LevelId");

                    b.HasOne("Talabat.Core.Entities.Academic_regulation.ProgramInformation", "Program")
                        .WithMany("Graduations")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Lockups.AllGrades", "Grades")
                        .WithMany("Graduations")
                        .HasForeignKey("TheMinimumGradeForTheCourseId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Grades");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Grad.Core.Entities.Graduation.GraduationLevels", b =>
                {
                    b.HasOne("Grad.Core.Entities.Graduation.Graduation", "Graduation")
                        .WithMany("LevelsTobePassed")
                        .HasForeignKey("GraduationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Lockups.Level", "Level")
                        .WithMany("GraduationLevels")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Graduation");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("Grad.Core.Entities.Graduation.GraduationSemesters", b =>
                {
                    b.HasOne("Grad.Core.Entities.Graduation.Graduation", "Graduation")
                        .WithMany("SemestersTobePssed")
                        .HasForeignKey("GraduationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Lockups.Semesters", "semesters")
                        .WithMany("GraduationSemesters")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Graduation");

                    b.Navigation("semesters");
                });

            modelBuilder.Entity("Grad.Core.Entities.Identity.AppUserFaculty", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Identity.AppUser", null)
                        .WithMany("Faculties")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Entities.Faculty", null)
                        .WithMany("FacultyAppUsers")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Grad.Core.Entities.Identity.AppUserUni", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Identity.AppUser", null)
                        .WithMany("Universities")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Entities.University", null)
                        .WithMany("UniAppUsers")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Grad.Core.Entities.Lockups.DivisionType", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("divisionTypes")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Talabat.Core.Entities.Academic_regulation.ProgramInformation", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Lockups.TheAcademicDegree", "AcademicDegree")
                        .WithMany("Program_Information")
                        .HasForeignKey("AcademicDegreeid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Lockups.BlockingProofOfRegistration", "BlockingProofOfRegistration")
                        .WithMany("Program_Information")
                        .HasForeignKey("BlockingProofOfRegistrationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Talabat.Core.Entities.Lockups.BurdenCalculation", "BurdenCalculation")
                        .WithMany("Program_Information")
                        .HasForeignKey("BurdanCalculationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Lockups.EditTheStudentLevel", "EditTheStudentLevel")
                        .WithMany("Program_Information")
                        .HasForeignKey("EditTheStudentLevelId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Talabat.Core.Entities.Entities.Faculty", "Institue")
                        .WithMany("ProgramInformations")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Lockups.PassingTheElectiveGroupBasedOn", "PassingTheElectiveGroupBasedOn")
                        .WithMany("Program_Information")
                        .HasForeignKey("PassingTheElectiveGroupBasedOnId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Entities.Programs", "PrerequisitesPrograms")
                        .WithMany("ProgramInformation_Pre")
                        .HasForeignKey("PrerequisitesProgramsId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Talabat.Core.Entities.Entities.Programs", "Programs")
                        .WithMany("Program_Information")
                        .HasForeignKey("ProgramsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Lockups.ReasonForBlockingRegistration", "ReasonForBlockingRegistration")
                        .WithMany("Program_Information")
                        .HasForeignKey("ReasonForBlockingRegistrationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Talabat.Core.Entities.Lockups.SystemType", "SystemType")
                        .WithMany("Program_Information")
                        .HasForeignKey("SystemTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Talabat.Core.Entities.Lockups.ReasonForBlockingAcademicResult", "TheReasonForHiddingTheResult")
                        .WithMany("Program_Information")
                        .HasForeignKey("TheReasonForHiddingTheResultId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Talabat.Core.Entities.Lockups.TheResultAppears", "TheResultAppears")
                        .WithMany("Result_Appears")
                        .HasForeignKey("TheResultAppearsId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Talabat.Core.Entities.Lockups.TheResultAppears", "TheResultToTheGuid")
                        .WithMany("ResultAppearsToTheGuid")
                        .HasForeignKey("TheResultToTheGuidId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Talabat.Core.Entities.Lockups.TypeOfFinancialStatementInTheProgram", "TypeOfFinancialStatementInTheProgram")
                        .WithMany("Program_Information")
                        .HasForeignKey("TypeOfFinancialStatementInTheProgramId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Talabat.Core.Entities.Lockups.TypeOfProgramFees", "TypeOfProgramFees")
                        .WithMany("Program_Information")
                        .HasForeignKey("TypeOfProgramFeesId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Talabat.Core.Entities.Lockups.TypeOfSummerFees", "TypeOfSummerFees")
                        .WithMany("Program_Information")
                        .HasForeignKey("TypeOfSummerFeesId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AcademicDegree");

                    b.Navigation("BlockingProofOfRegistration");

                    b.Navigation("BurdenCalculation");

                    b.Navigation("EditTheStudentLevel");

                    b.Navigation("Institue");

                    b.Navigation("PassingTheElectiveGroupBasedOn");

                    b.Navigation("PrerequisitesPrograms");

                    b.Navigation("Programs");

                    b.Navigation("ReasonForBlockingRegistration");

                    b.Navigation("SystemType");

                    b.Navigation("TheReasonForHiddingTheResult");

                    b.Navigation("TheResultAppears");

                    b.Navigation("TheResultToTheGuid");

                    b.Navigation("TypeOfFinancialStatementInTheProgram");

                    b.Navigation("TypeOfProgramFees");

                    b.Navigation("TypeOfSummerFees");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Entities.Faculty", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("Faculties")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Entities.Programs", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.Faculty", "Faculty")
                        .WithMany("Programs")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Identity.Address", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Identity.AppUser", "User")
                        .WithOne("Address")
                        .HasForeignKey("Talabat.Core.Entities.Identity.Address", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.AbsenteeEstimateCalculation", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("AbsenteeEstimateCalculation")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.AllGrades", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("AllGrades")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.BlockingProofOfRegistration", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("BlockingProofOfRegistrations")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.BurdenCalculation", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("BurdenCalculation")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.CollegeCourses", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.Faculty", "Faculty")
                        .WithMany("CollegeCourses")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.CourseRequirement", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("CourseRequirements")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.CourseType", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("CourseTypes")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.EditTheStudentLevel", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("EditTheStudentLevel")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.EquivalentGrade", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("EquivalentGrades")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.GradesDetails", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("GradesDetails")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.Hours", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("Hours")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.Level", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("Levels")
                        .HasForeignKey("UniversityId");

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.PassingTheElectiveGroupBasedOn", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("passingTheElectiveGroupBasedOns")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.Prerequisites", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.PreviousQualification", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("PreviousQualifications")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.ReasonForBlockingAcademicResult", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("ReasonForBlockingAcademicResults")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.ReasonForBlockingRegistration", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("ReasonForBlockingRegistration")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.Semesters", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("Semesters")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.SystemType", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("SystemTypes")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.TheAcademicDegree", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("TheAcademicDegrees")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.TheResultAppears", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("TheResultAppears")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.TypeOfFinancialStatementInTheProgram", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("TypeOfFinancialStatements")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.TypeOfProgramFees", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("TypeOfProgramFees")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.TypeOfStudySection", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("TypeOfStudySections")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.TypeOfSummerFees", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("TypeOfSummerFees")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Grad.Core.Entities.Control.Control", b =>
                {
                    b.Navigation("ACaseOfAbsenceInTheDetailedGrades");

                    b.Navigation("ASuccessRatingDoesNotAddHours");

                    b.Navigation("DetailsOfExceptionalLetters");

                    b.Navigation("DetailsOfTheoreticalFailingGradesNav");

                    b.Navigation("EstimatesNotDefinedInTheLists");

                    b.Navigation("ExceptionalLetterGrades");

                    b.Navigation("FailureEstimatesInTheLists");
                });

            modelBuilder.Entity("Grad.Core.Entities.CoursesInfo.CourseInformation", b =>
                {
                    b.Navigation("coursesAndHours");

                    b.Navigation("coursesandGradesDetails");

                    b.Navigation("detailsOfFailingGrades");

                    b.Navigation("preRequisiteCourses");
                });

            modelBuilder.Entity("Grad.Core.Entities.CumulativeAverage.CumulativeAverage", b =>
                {
                    b.Navigation("GadesOfEstimatesThatDoesNotCount");
                });

            modelBuilder.Entity("Grad.Core.Entities.Graduation.Graduation", b =>
                {
                    b.Navigation("AverageValues");

                    b.Navigation("LevelsTobePassed");

                    b.Navigation("SemestersTobePssed");
                });

            modelBuilder.Entity("Grad.Core.Entities.Lockups.DivisionType", b =>
                {
                    b.Navigation("pI_DivisionTypes");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Academic_regulation.ProgramInformation", b =>
                {
                    b.Navigation("Controls");

                    b.Navigation("Courses");

                    b.Navigation("CumulativeAverages");

                    b.Navigation("Graduations");

                    b.Navigation("PI_EstimatesOfCourseFeeExemptions");

                    b.Navigation("Program_TheGrades");

                    b.Navigation("academicLoadAccordingToLevels");

                    b.Navigation("pI_AllGradesSummerEstimates");

                    b.Navigation("pI_DetailedGradesToBeAnnounced");

                    b.Navigation("pI_DivisionTypes");

                    b.Navigation("programLevels");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Entities.Faculty", b =>
                {
                    b.Navigation("CollegeCourses");

                    b.Navigation("FacultyAppUsers");

                    b.Navigation("ProgramInformations");

                    b.Navigation("Programs");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Entities.Programs", b =>
                {
                    b.Navigation("ProgramInformation_Pre");

                    b.Navigation("Program_Information");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Entities.University", b =>
                {
                    b.Navigation("AbsenteeEstimateCalculation");

                    b.Navigation("AllGrades");

                    b.Navigation("BlockingProofOfRegistrations");

                    b.Navigation("BurdenCalculation");

                    b.Navigation("CourseRequirements");

                    b.Navigation("CourseTypes");

                    b.Navigation("EditTheStudentLevel");

                    b.Navigation("EquivalentGrades");

                    b.Navigation("Faculties");

                    b.Navigation("GradesDetails");

                    b.Navigation("Hours");

                    b.Navigation("Levels");

                    b.Navigation("PreviousQualifications");

                    b.Navigation("ReasonForBlockingAcademicResults");

                    b.Navigation("ReasonForBlockingRegistration");

                    b.Navigation("Semesters");

                    b.Navigation("SystemTypes");

                    b.Navigation("TheAcademicDegrees");

                    b.Navigation("TheResultAppears");

                    b.Navigation("TypeOfFinancialStatements");

                    b.Navigation("TypeOfProgramFees");

                    b.Navigation("TypeOfStudySections");

                    b.Navigation("TypeOfSummerFees");

                    b.Navigation("UniAppUsers");

                    b.Navigation("divisionTypes");

                    b.Navigation("passingTheElectiveGroupBasedOns");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Identity.AppUser", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Faculties");

                    b.Navigation("Universities");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.AllGrades", b =>
                {
                    b.Navigation("ASuccessRatingDoesNotAddHoursOrAverages");

                    b.Navigation("AverageValues");

                    b.Navigation("EstimateDeprivationAfterTheExam");

                    b.Navigation("EstimateDeprivationBeforeTheExam");

                    b.Navigation("EstimatesNotDefinedInTheList");

                    b.Navigation("ExceptionalLetterGrades");

                    b.Navigation("FailureEstimatesInTheLists");

                    b.Navigation("FirstReduction");

                    b.Navigation("FirstReductionInfo");

                    b.Navigation("Graduations");

                    b.Navigation("PI_EstimatesOfCourseFeeExemptions");

                    b.Navigation("SecondReduction");

                    b.Navigation("SecondReductionInfo");

                    b.Navigation("TheoriticalFailure");

                    b.Navigation("ThhirdReductionInfo");

                    b.Navigation("ThirdReduction");

                    b.Navigation("UtmostGrades");

                    b.Navigation("gadesOfEstimatesThatDoesNotCount");

                    b.Navigation("pI_AllGradesSummerEstimates");

                    b.Navigation("program_TheGrades");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.BlockingProofOfRegistration", b =>
                {
                    b.Navigation("Program_Information");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.BurdenCalculation", b =>
                {
                    b.Navigation("Program_Information");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.CollegeCourses", b =>
                {
                    b.Navigation("CourseInformations");

                    b.Navigation("PartOneCourse");

                    b.Navigation("preRequisiteCourses");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.CourseType", b =>
                {
                    b.Navigation("CourseInformation");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.EditTheStudentLevel", b =>
                {
                    b.Navigation("Program_Information");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.EquivalentGrade", b =>
                {
                    b.Navigation("AverageValues");

                    b.Navigation("EquivalentEstimate");

                    b.Navigation("GraduationEstimate");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.GradesDetails", b =>
                {
                    b.Navigation("ACaseOfAbsenceInTheDetailedGrades");

                    b.Navigation("DetailsOfExceptionalLetters");

                    b.Navigation("DetailsOfTheoreticalFailingGrades");

                    b.Navigation("coursesandGradesDetails");

                    b.Navigation("detailsOfFailingGrades");

                    b.Navigation("pI_DetailedGradesToBeAnnounceds");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.Hours", b =>
                {
                    b.Navigation("coursesAndHours");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.Level", b =>
                {
                    b.Navigation("CourseInformation");

                    b.Navigation("GraduationLevels");

                    b.Navigation("Graduations");

                    b.Navigation("ProgramLevels");

                    b.Navigation("academicLoadAccordingToLevels");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.PassingTheElectiveGroupBasedOn", b =>
                {
                    b.Navigation("Program_Information");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.Prerequisites", b =>
                {
                    b.Navigation("CourseInformation");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.PreviousQualification", b =>
                {
                    b.Navigation("CourseInformation");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.ReasonForBlockingAcademicResult", b =>
                {
                    b.Navigation("Program_Information");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.ReasonForBlockingRegistration", b =>
                {
                    b.Navigation("Program_Information");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.Semesters", b =>
                {
                    b.Navigation("CourseInformation");

                    b.Navigation("GraduationSemesters");

                    b.Navigation("academicLoadAccordingToLevels");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.SystemType", b =>
                {
                    b.Navigation("Program_Information");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.TheAcademicDegree", b =>
                {
                    b.Navigation("Program_Information");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.TheResultAppears", b =>
                {
                    b.Navigation("ResultAppearsToTheGuid");

                    b.Navigation("Result_Appears");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.TypeOfFinancialStatementInTheProgram", b =>
                {
                    b.Navigation("Program_Information");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.TypeOfProgramFees", b =>
                {
                    b.Navigation("Program_Information");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.TypeOfSummerFees", b =>
                {
                    b.Navigation("Program_Information");
                });
#pragma warning restore 612, 618
        }
    }
}
