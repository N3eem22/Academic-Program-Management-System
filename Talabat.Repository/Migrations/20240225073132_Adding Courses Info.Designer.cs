// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Talabat.Repository.Data;

#nullable disable

namespace Grad.Repository.Migrations
{
    [DbContext(typeof(GradContext))]
    [Migration("20240225073132_Adding Courses Info")]
    partial class AddingCoursesInfo
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Grad.Core.Entities.CoursesInfo.CourseInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddingCourse")
                        .HasColumnType("int");

                    b.Property<int>("ChooseDetailesofFailingGrades")
                        .HasColumnType("int");

                    b.Property<int>("CourseTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("FirstReductionEstimatesForFailureTimes")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<int>("LinkRegistrationToHours")
                        .HasColumnType("int");

                    b.Property<int>("MaximumGrade")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfPreviousPreRequisiteCourses")
                        .HasColumnType("int");

                    b.Property<int?>("PartOneCourse")
                        .HasColumnType("int");

                    b.Property<bool>("PassOrFailSubject")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("PrerequisiteId")
                        .HasColumnType("int");

                    b.Property<bool>("RegistrationForTheCourseInTheSummerTerm")
                        .HasColumnType("bit");

                    b.Property<int?>("SecondReductionEstimatesForFailureTimes")
                        .HasColumnType("int");

                    b.Property<int>("SemesterId")
                        .HasColumnType("int");

                    b.Property<int>("SuccessRate")
                        .HasColumnType("int");

                    b.Property<int?>("ThirdReductionEstimatesForFailureTimes")
                        .HasColumnType("int");

                    b.Property<int?>("previousQualification")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseTypeId");

                    b.HasIndex("FirstReductionEstimatesForFailureTimes");

                    b.HasIndex("LevelId");

                    b.HasIndex("PartOneCourse");

                    b.HasIndex("PrerequisiteId");

                    b.HasIndex("SecondReductionEstimatesForFailureTimes");

                    b.HasIndex("SemesterId");

                    b.HasIndex("ThirdReductionEstimatesForFailureTimes");

                    b.HasIndex("previousQualification");

                    b.ToTable("EN_CourssesInformations", (string)null);
                });

            modelBuilder.Entity("Grad.Core.Entities.CoursesInfo.CoursesandGradesDetails", b =>
                {
                    b.Property<int?>("CourseInfoId")
                        .HasColumnType("int");

                    b.Property<int?>("GradeDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("CourseInfoId", "GradeDetailsId");

                    b.HasIndex("GradeDetailsId");

                    b.ToTable("CoursesInformationsAndDetailedGrade", (string)null);
                });

            modelBuilder.Entity("Grad.Core.Entities.CoursesInfo.CoursesAndHours", b =>
                {
                    b.Property<int>("HourId")
                        .HasColumnType("int");

                    b.Property<int>("CourseInfoId")
                        .HasColumnType("int");

                    b.HasKey("HourId", "CourseInfoId");

                    b.HasIndex("CourseInfoId");

                    b.ToTable("CoursesAndHours", (string)null);
                });

            modelBuilder.Entity("Grad.Core.Entities.CoursesInfo.DetailsOfFailingGrades", b =>
                {
                    b.Property<int>("CourseInfoId")
                        .HasColumnType("int");

                    b.Property<int>("FailedGradeId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("CourseInfoId", "FailedGradeId");

                    b.HasIndex("FailedGradeId");

                    b.ToTable("CoursesAndFailingGrades", (string)null);
                });

            modelBuilder.Entity("Grad.Core.Entities.CoursesInfo.PreRequisiteCourses", b =>
                {
                    b.Property<int>("PreRequisiteCourseId")
                        .HasColumnType("int");

                    b.Property<int>("CourseInfoId")
                        .HasColumnType("int");

                    b.HasKey("PreRequisiteCourseId", "CourseInfoId");

                    b.HasIndex("CourseInfoId");

                    b.ToTable("PreRequisiteCourses");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Academic_regulation.ProgramInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AdditionalRegistrationHours")
                        .HasColumnType("int");

                    b.Property<bool>("AllowingTheRegistrationOfaSpecificNumberOfElectiveCoursesDuringTheYear")
                        .HasColumnType("bit");

                    b.Property<string>("BeginningOfTheProgram")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("BookFeeIsCalculatedForTheFirstTimeOfRegistrationOnly")
                        .HasColumnType("bit");

                    b.Property<bool>("CalculatingaSpecialRegistrationFeeForaCourseIfaPreviousAssessmentOfTheCourseIsIncomplete")
                        .HasColumnType("bit");

                    b.Property<int>("CreditHours")
                        .HasColumnType("int");

                    b.Property<string>("DetailedGradesToBeAnnounced")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DivisionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EligibleHoursforProjectRegistration")
                        .HasColumnType("int");

                    b.Property<string>("EndOfTheProgram")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstimatesOfCourseFeeExemption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ExcludingTheBudgetTermWhenCalculatingTheGPA")
                        .HasColumnType("bit");

                    b.Property<int>("FailureTimesForRe_Enrollment")
                        .HasColumnType("int");

                    b.Property<int>("FailureTimesForWarning")
                        .HasColumnType("int");

                    b.Property<int>("FreeHours")
                        .HasColumnType("int");

                    b.Property<string>("Institute")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstitutionCode")
                        .HasColumnType("int");

                    b.Property<bool>("LinkingTheAppearanceOfDocumentsToTheReasonForWithholdingRegistration")
                        .HasColumnType("bit");

                    b.Property<bool>("LinkingTheAppearanceOfTheExaminationScheduleToThePaymentOfFees")
                        .HasColumnType("bit");

                    b.Property<string>("MajorNameInArabic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MajorNameInEnglish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Mandatory_ProjectHours")
                        .HasColumnType("int");

                    b.Property<string>("NameInCertificate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameInCertificateInEnglish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfFailureTimesToRequireRegistrationOfCompulsoryFailureSubjects")
                        .HasColumnType("int");

                    b.Property<int>("OptionalHours")
                        .HasColumnType("int");

                    b.Property<int>("ProgramCode")
                        .HasColumnType("int");

                    b.Property<string>("ProgramFeeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProgramNameInArabic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProgramNameInEnglish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Questionnaire")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonForBlockingRegistration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RegistrationOfCoursesOfferedToStudentsFromTheSameCurrentSemesterOnlyThroughTheStudentPortalOnly")
                        .HasColumnType("bit");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SpecialProgram")
                        .HasColumnType("bit");

                    b.Property<string>("SummerCourseEstimates")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamCode")
                        .HasColumnType("int");

                    b.Property<string>("TheReasonForHiddingTheResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TheResultAppearanceToTheGuide")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeOfFinancialStatementInTheProgram")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeOfSummerFees")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pre_Requisite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AR_ProgramInformation");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Entities.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FacultyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("Faculty");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Entities.Programs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("FacultyId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("ProgramNameInArabic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProgramNameInEnglish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("EN_Programs");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Entities.University", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.ToTable("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.AbsenteeEstimateCalculation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("absenteeEstimateCalculation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_AbsenteeEstimateCalculation");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.AllGrades", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("TheGrade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_AllGrades");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.BlockingProofOfRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ProgramInformationId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("ReasonsOfBlocking")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgramInformationId");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_BlockingProofOfRegistration");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.BurdenCalculation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BurdenCalculationAS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProgramInformationId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgramInformationId");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_BurdenCalculation");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.CollegeCourses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ContentSummaryInArabic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentSummaryInEnglish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseCodeInArabic")
                        .HasColumnType("int");

                    b.Property<int>("CourseCodeInEnglish")
                        .HasColumnType("int");

                    b.Property<string>("CourseNameInArabic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseNameInEnglish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseNickname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FacultyId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("Sub_CourseCodeInArabic")
                        .HasColumnType("int");

                    b.Property<int>("Sub_CourseCodeInEnglish")
                        .HasColumnType("int");

                    b.Property<string>("Sub_CourseNameInArabic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sub_CourseNameInEnglish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("CollegeCourses");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.CourseRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("courseRequirement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_CourseRequirement");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.CourseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("courseType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_CourseType");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.EditTheStudentLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ProgramInformationId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("editTheStudentLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProgramInformationId");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_EditTheStudentLevel");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.EquivalentGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("equivalentGrade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_EquivalentGrade");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.GradesDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("TheDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_GradesDetails");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.Hours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("HoursName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_Hours");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("levels")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_Level");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.PassingTheElectiveGroupBasedOn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("PassingTheElectiveGroup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProgramInformationId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgramInformationId");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_PassingTheElectiveGroupBasedOn");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.Prerequisites", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Prerequisite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_Prerequisite");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.PreviousQualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("previousQualification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_PreviousQualification");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.ReasonForBlockingAcademicResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("TheReasonForBlockingAcademicResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_ReasonForBlockingAcademicResult");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.ReasonForBlockingRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("TheReasonForBlockingRegistration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_ReasonForBlockingRegistration");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.Semesters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("semesters")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_Semester");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.SystemType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ProgramInformationId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgramInformationId");

                    b.HasIndex("UniversityId");

                    b.ToTable("System Type");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.TheAcademicDegree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AcademicDegreeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProgramInformationId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgramInformationId");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_TheAcademicDegree");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.TheResultAppears", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("resultAppears")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_TheResultAppears");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.TypeOfFinancialStatementInTheProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("TheType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_TypeOfFinancialStatementInTheProgram");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.TypeOfProgramFees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("TypeOfFees")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_TypeOfProgramFees");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.TypeOfStudySection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("TheTypeOfStudySectio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_TypeOfStudySection");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.TypeOfSummerFees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("TheTypeOfSummerFees")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("LU_Typeofsummerfees");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Logs.ApplicationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjectJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Log_ApplicationLogs");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Permissions.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Perm_ApplicationUser");
                });

            modelBuilder.Entity("Grad.Core.Entities.CoursesInfo.CourseInformation", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Lockups.CourseType", "CourseType")
                        .WithMany()
                        .HasForeignKey("CourseTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Lockups.AllGrades", "FirstGrades")
                        .WithMany()
                        .HasForeignKey("FirstReductionEstimatesForFailureTimes")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Talabat.Core.Entities.Lockups.Level", "level")
                        .WithMany()
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Lockups.CollegeCourses", "collegeCourses")
                        .WithMany()
                        .HasForeignKey("PartOneCourse")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Talabat.Core.Entities.Lockups.Prerequisites", "Prerequisites")
                        .WithMany()
                        .HasForeignKey("PrerequisiteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Lockups.AllGrades", "SecondGrades")
                        .WithMany()
                        .HasForeignKey("SecondReductionEstimatesForFailureTimes")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Talabat.Core.Entities.Lockups.Semesters", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Lockups.AllGrades", "ThirdGrades")
                        .WithMany()
                        .HasForeignKey("ThirdReductionEstimatesForFailureTimes")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Talabat.Core.Entities.Lockups.PreviousQualification", "PreviousQualification")
                        .WithMany()
                        .HasForeignKey("previousQualification")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CourseType");

                    b.Navigation("FirstGrades");

                    b.Navigation("Prerequisites");

                    b.Navigation("PreviousQualification");

                    b.Navigation("SecondGrades");

                    b.Navigation("Semester");

                    b.Navigation("ThirdGrades");

                    b.Navigation("collegeCourses");

                    b.Navigation("level");
                });

            modelBuilder.Entity("Grad.Core.Entities.CoursesInfo.CoursesandGradesDetails", b =>
                {
                    b.HasOne("Grad.Core.Entities.CoursesInfo.CourseInformation", "CourseInformation")
                        .WithMany("coursesandGradesDetails")
                        .HasForeignKey("CourseInfoId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Talabat.Core.Entities.Lockups.GradesDetails", "GradesDetails")
                        .WithMany("coursesandGradesDetails")
                        .HasForeignKey("GradeDetailsId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CourseInformation");

                    b.Navigation("GradesDetails");
                });

            modelBuilder.Entity("Grad.Core.Entities.CoursesInfo.CoursesAndHours", b =>
                {
                    b.HasOne("Grad.Core.Entities.CoursesInfo.CourseInformation", "CourseInformation")
                        .WithMany("coursesAndHours")
                        .HasForeignKey("CourseInfoId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Talabat.Core.Entities.Lockups.Hours", "Hours")
                        .WithMany("coursesAndHours")
                        .HasForeignKey("HourId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CourseInformation");

                    b.Navigation("Hours");
                });

            modelBuilder.Entity("Grad.Core.Entities.CoursesInfo.DetailsOfFailingGrades", b =>
                {
                    b.HasOne("Grad.Core.Entities.CoursesInfo.CourseInformation", "CourseInformation")
                        .WithMany("detailsOfFailingGrades")
                        .HasForeignKey("CourseInfoId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Talabat.Core.Entities.Lockups.GradesDetails", "FailedGrade")
                        .WithMany("detailsOfFailingGrades")
                        .HasForeignKey("FailedGradeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CourseInformation");

                    b.Navigation("FailedGrade");
                });

            modelBuilder.Entity("Grad.Core.Entities.CoursesInfo.PreRequisiteCourses", b =>
                {
                    b.HasOne("Grad.Core.Entities.CoursesInfo.CourseInformation", "CourseInformation")
                        .WithMany("preRequisiteCourses")
                        .HasForeignKey("CourseInfoId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Talabat.Core.Entities.Lockups.CollegeCourses", "Courses")
                        .WithMany("preRequisiteCourses")
                        .HasForeignKey("PreRequisiteCourseId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CourseInformation");

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Entities.Faculty", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("Faculties")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Entities.Programs", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.Faculty", "Faculty")
                        .WithMany("Programs")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.AbsenteeEstimateCalculation", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("AbsenteeEstimateCalculation")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.AllGrades", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("AllGrades")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.BlockingProofOfRegistration", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Academic_regulation.ProgramInformation", "ProgramInformation")
                        .WithMany("blockingProofOfRegistration")
                        .HasForeignKey("ProgramInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("BlockingProofOfRegistrations")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProgramInformation");

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.BurdenCalculation", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Academic_regulation.ProgramInformation", "ProgramInformation")
                        .WithMany("BurdenCalculation")
                        .HasForeignKey("ProgramInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("BurdenCalculation")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProgramInformation");

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.CollegeCourses", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.Faculty", "Faculty")
                        .WithMany("CollegeCourses")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.CourseRequirement", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("CourseRequirements")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.CourseType", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("CourseTypes")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.EditTheStudentLevel", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Academic_regulation.ProgramInformation", "ProgramInformation")
                        .WithMany("editTheStudentLevels")
                        .HasForeignKey("ProgramInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("EditTheStudentLevel")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProgramInformation");

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.EquivalentGrade", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("EquivalentGrades")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.GradesDetails", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("GradesDetails")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.Hours", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("Hours")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.Level", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("Levels")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.PassingTheElectiveGroupBasedOn", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Academic_regulation.ProgramInformation", "ProgramInformation")
                        .WithMany("passingTheElectiveGroupBasedOns")
                        .HasForeignKey("ProgramInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("passingTheElectiveGroupBasedOns")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProgramInformation");

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.Prerequisites", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.PreviousQualification", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("PreviousQualifications")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.ReasonForBlockingAcademicResult", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("ReasonForBlockingAcademicResults")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.ReasonForBlockingRegistration", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("ReasonForBlockingRegistration")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.Semesters", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("Semesters")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.SystemType", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Academic_regulation.ProgramInformation", "ProgramInformation")
                        .WithMany("SystemType")
                        .HasForeignKey("ProgramInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("SystemTypes")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProgramInformation");

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.TheAcademicDegree", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Academic_regulation.ProgramInformation", "ProgramInformation")
                        .WithMany("theAcademicDegrees")
                        .HasForeignKey("ProgramInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("TheAcademicDegrees")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProgramInformation");

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.TheResultAppears", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("TheResultAppears")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.TypeOfFinancialStatementInTheProgram", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("TypeOfFinancialStatements")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.TypeOfProgramFees", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("TypeOfProgramFees")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.TypeOfStudySection", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("TypeOfStudySections")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.TypeOfSummerFees", b =>
                {
                    b.HasOne("Talabat.Core.Entities.Entities.University", "University")
                        .WithMany("TypeOfSummerFees")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Grad.Core.Entities.CoursesInfo.CourseInformation", b =>
                {
                    b.Navigation("coursesAndHours");

                    b.Navigation("coursesandGradesDetails");

                    b.Navigation("detailsOfFailingGrades");

                    b.Navigation("preRequisiteCourses");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Academic_regulation.ProgramInformation", b =>
                {
                    b.Navigation("BurdenCalculation");

                    b.Navigation("SystemType");

                    b.Navigation("blockingProofOfRegistration");

                    b.Navigation("editTheStudentLevels");

                    b.Navigation("passingTheElectiveGroupBasedOns");

                    b.Navigation("theAcademicDegrees");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Entities.Faculty", b =>
                {
                    b.Navigation("CollegeCourses");

                    b.Navigation("Programs");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Entities.University", b =>
                {
                    b.Navigation("AbsenteeEstimateCalculation");

                    b.Navigation("AllGrades");

                    b.Navigation("BlockingProofOfRegistrations");

                    b.Navigation("BurdenCalculation");

                    b.Navigation("CourseRequirements");

                    b.Navigation("CourseTypes");

                    b.Navigation("EditTheStudentLevel");

                    b.Navigation("EquivalentGrades");

                    b.Navigation("Faculties");

                    b.Navigation("GradesDetails");

                    b.Navigation("Hours");

                    b.Navigation("Levels");

                    b.Navigation("PreviousQualifications");

                    b.Navigation("ReasonForBlockingAcademicResults");

                    b.Navigation("ReasonForBlockingRegistration");

                    b.Navigation("Semesters");

                    b.Navigation("SystemTypes");

                    b.Navigation("TheAcademicDegrees");

                    b.Navigation("TheResultAppears");

                    b.Navigation("TypeOfFinancialStatements");

                    b.Navigation("TypeOfProgramFees");

                    b.Navigation("TypeOfStudySections");

                    b.Navigation("TypeOfSummerFees");

                    b.Navigation("passingTheElectiveGroupBasedOns");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.CollegeCourses", b =>
                {
                    b.Navigation("preRequisiteCourses");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.GradesDetails", b =>
                {
                    b.Navigation("coursesandGradesDetails");

                    b.Navigation("detailsOfFailingGrades");
                });

            modelBuilder.Entity("Talabat.Core.Entities.Lockups.Hours", b =>
                {
                    b.Navigation("coursesAndHours");
                });
#pragma warning restore 612, 618
        }
    }
}
